name: scan-cgr-libraries

on:
  workflow_dispatch: # Allows manual triggering

env:
  MALCONTENT_IMAGE: "cgr.dev/chainguard/malcontent@sha256:fdfca44c401a5ca98af51292a821278644895bc1963f7a76a733d76647ff0ede"
  REPO_URL: "https://github.com/chainguard-dev/malcontent-samples.git"
  LOCAL_REPO_DIR: "malcontent-samples"
  ULTRALYTICS_SUBDIR: "python/2024.ultralytics"
  CGR_LOCAL_REPO_DIR: "chainguard-libraries"
  CGR_ULTRALYTICS_SUBDIR: "cgr-ultralytics-8.3.47"
  
jobs:
  scan-python-malware:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      contents: write
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.ref }} # Ensures we stay on the triggered branch
          fetch-depth: 0         # Necessary for pushing changes

      - name: 'Pull Malcontent Image'
        run: |
          docker pull "${{ env.MALCONTENT_IMAGE }}"

      
      - name: Set up full path
        id: paths
        run: |
          FULLBASEPATH="${GITHUB_WORKSPACE}/${LOCAL_REPO_DIR}/${ULTRALYTICS_SUBDIR}"
          echo "FULLBASEPATH=$FULLBASEPATH"
          echo "fullpath=$FULLBASEPATH" >> "$GITHUB_OUTPUT"

          CGRFULLBASEPATH="${GITHUB_WORKSPACE}/${CGR_LOCAL_REPO_DIR}/${CGR_ULTRALYTICS_SUBDIR}"
          echo "CGRFULLBASEPATH=$CGRFULLBASEPATH"
          echo "cgrfullpath=$CGRFULLBASEPATH" >> "$GITHUB_OUTPUT"

      - name: Analyze Chainguard Library Python Ultralytics 
        run: |
          
          CONTAINER_NAME="cgr-temp"
          OUTPUT_FILE="/home/nonroot/cgr-malcontent-analyze.json"
          LOCAL_OUTPUT_DIR="${GITHUB_WORKSPACE}/scans"
          LOCAL_OUTPUT_PATH="${LOCAL_OUTPUT_DIR}/cgr-malcontent-analyze.json"
          
          docker run --name "$CONTAINER_NAME" \
             -v "${{ steps.paths.outputs.fullpath }}:/home/nonroot/malcontent-samples/" \
             -v "${{ steps.paths.outputs.fullpath }}:/home/nonroot/chainguard-libraries/" \
            "${MALCONTENT_IMAGE}" \
            --min-risk=critical \
            --format=json \
            --output="$OUTPUT_FILE" \
            analyze /home/nonroot/chainguard-libraries/cgr-ultralytics-8.3.47

          docker cp "$CONTAINER_NAME:$OUTPUT_FILE" "$LOCAL_OUTPUT_PATH"
          docker rm "$CONTAINER_NAME" > /dev/null

          echo "[*] Output saved to scans/cgr-malcontent-analyze.json"
          echo "[✔] Done"

      - name: Commit and push updated JSON file
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          git add scans/cgr-malcontent-analyze.json
          
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update CGR Malware Scan"
            git push origin "${GITHUB_REF#refs/heads/}"
          fi
      
      - name: Conditionally Clear Code Scanning Results if JSON is Empty
        if: always()
        run: |
          FILE="scans/cgr-malcontent-analyze.json"

          # Check if the file contains only {}
          if [ -f "$FILE" ] && jq -e '(. | length) == 0' "$FILE" > /dev/null; then
            echo "JSON is empty: clearing code scanning results..."

            # Get the latest code scanning analysis ID using GitHub CLI
            ANALYSES=$(gh api \
              -H "Accept: application/vnd.github+json" \
              "/repos/${{ github.repository }}/code-scanning/analyses")

            # Parse and delete each analysis (can filter by tool if needed)
            echo "$ANALYSES" | jq -r '.[].id' | while read -r analysis_id; do
              echo "Deleting analysis ID $analysis_id..."
              gh api \
                -X DELETE \
                -H "Accept: application/vnd.github+json" \
                "/repos/${{ github.repository }}/code-scanning/analyses/$analysis_id"
            done
            echo "✔ Code scanning results cleared."

          else
            echo "JSON is not empty. No code scanning results will be cleared."
          fi
