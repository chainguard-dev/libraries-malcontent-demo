name: scan-malware

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch: # Allows manual triggering

env:
  MALCONTENT_IMAGE: "cgr.dev/chainguard/malcontent@sha256:fdfca44c401a5ca98af51292a821278644895bc1963f7a76a733d76647ff0ede"
  MALCONTENT_SAMPLES_REPO_URL: "https://github.com/chainguard-dev/malcontent-samples.git"
  MALCONTRENT_SAMPLES_DIR: "${{ github.workspace }}/malcontent-samples"
  MALCONTRENT_ULTRALYTICS_SAMPLES_DIR: "${{ github.workspace }}/malcontent-samples/python/2024.ultralytics"
  CONTAINER_OUTPUT_FILE: "/home/nonroot/ultralytics-malcontent-diff-v8.3.40-v8.3.41.json"
  LOCAL_OUTPUT_DIR: ${{ github.workspace }}/scans
  LOCAL_OUTPUT_FILE: ${{ github.workspace }}/scans/ultralytics-malcontent-diff-v8.3.40-v8.3.41.json
  
jobs:
  scan-python-malware:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      contents: write
      packages: write
      id-token: write
      issues: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.ref }} # Ensures we stay on the triggered branch
          fetch-depth: 0         # Necessary for pushing changes

      - name: Clone malcontent-samples repo
        run: |
          if [ -d "${{MALCONTRENT_SAMPLES_DIR}}" ]; then
            echo "[*] Using existing local repo at ${{MALCONTRENT_SAMPLES_DIR}}"
          else
            echo "[*] Cloning repository (shallow)..."
            git clone --depth=1 --branch main --single-branch "${{MALCONTENT_SAMPLES_REPO_URL}}" "${{MALCONTRENT_SAMPLES_DIR:}}"
          fi

      - name: 'Pull Malcontent Image'
        run: |
          docker pull "${{ env.MALCONTENT_IMAGE }}"
      
      - name: Analyze Ultralytics v8.3.40
        run: |
          docker run --rm -v "${{ MALCONTRENT_ULTRALYTICS_SAMPLES_DIR }}:/home/nonroot/malcontent/" \
            "${MALCONTENT_IMAGE}" \
            --min-risk=medium \
            --stats \
            analyze /home/nonroot/malcontent/v8.3.40
          
      - name: Analyze Ultralytics v8.3.41
        run: |
          docker run --rm -v "${{ MALCONTRENT_ULTRALYTICS_SAMPLES_DIR }}:/home/nonroot/malcontent/" \
            "${MALCONTENT_IMAGE}" \
            --include-data-files=true \
            --min-risk=medium \
            --quantity-increases-risk=true \
            --stats \
            analyze /home/nonroot/malcontent/v8.3.41

      - name: Diffing Ultralytics v8.3.40 â†” v8.3.41
        run: |
          CONTAINER_NAME="malcontent-diff-temp"
          if [ -d "${{MALCONTRENT_SAMPLES_DIR}}" ]; then
            echo "scans directory exists"
          else
            echo "creating scans dir"
            mkdir -p "${{LOCAL_OUTPUT_DIR}}"
          fi

          docker run --name "$CONTAINER_NAME" \
            -v "${{ MALCONTRENT_ULTRALYTICS_SAMPLES_DIR }}:/home/nonroot/malcontent/" \
            "$MALCONTENT_IMAGE" \
            --min-risk=high \
            --format=json \
            --output="$CONTAINER_OUTPUT_FILE" \
            diff --file-risk-increase=true \
            /home/nonroot/malcontent/v8.3.40 /home/nonroot/malcontent/v8.3.41

          docker cp "$CONTAINER_NAME:$CONTAINER_OUTPUT_FILE" "${{LOCAL_OUTPUT_FILE}}"
          docker rm "$CONTAINER_NAME" > /dev/null

          echo "[*] Output saved to scans/ultralytics-malcontent-diff-v8.3.40-v8.3.41.json"
          echo "[âœ”] Done"

      - name: Commit and push updated JSON file
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          git add scans/ultralytics-malcontent-diff-v8.3.40-v8.3.41.json
          
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update malware diff JSON: v8.3.40 â†’ v8.3.41"
            git push origin "${GITHUB_REF#refs/heads/}"
          fi
        
      - name: Detect CRITICAL malcontent findings
        id: detect
        run: |
          JSON="${{LOCAL_OUTPUT_FILE}}"  
          if jq -e '.. | objects | select(has("risk")) | select(.risk=="CRITICAL")' "$JSON" >/dev/null; then
            echo "critical=true" >> "$GITHUB_OUTPUT"
            echo "ðŸ”´ CRITICAL finding detected"
          else
            echo "critical=false" >> "$GITHUB_OUTPUT"
            echo "âœ… No CRITICAL findings"
          fi
  
      - name: Add malcontent/critical label to PR
        if: steps.detect.outputs.critical == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const label = 'malcontent/critical';
            const {owner, repo} = context.repo;
            const issue_number = context.payload.pull_request.number;
  
            try {
              await github.rest.issues.getLabel({owner, repo, name: label});
            } catch (e) {
              if (e.status === 404) {
                await github.rest.issues.createLabel({
                  owner, repo,
                  name: label,
                  color: 'b60205',                     // red
                  description: 'Critical malware risk detected by malcontent'
                });
              } else { throw e; }
            }
            
            // Add the label to the PR
            await github.rest.issues.addLabels({
              owner, repo, issue_number,
              labels: [label]
            });
            core.notice(`Added "${label}" label to PR #${issue_number}`);
