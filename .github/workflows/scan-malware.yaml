name: scan-malware

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  MALCONTENT_IMAGE: "cgr.dev/chainguard/malcontent@sha256:fdfca44c401a5ca98af51292a821278644895bc1963f7a76a733d76647ff0ede"
  MALCONTENT_SAMPLES_REPO_URL: "https://github.com/chainguard-dev/malcontent-samples.git"
  MALCONTENT_SAMPLES_DIR: "${{ github.workspace }}/malcontent-samples"
  MALCONTENT_ULTRALYTICS_SAMPLES_DIR: "${{ github.workspace }}/malcontent-samples/python/2024.ultralytics"
  CONTAINER_OUTPUT_FILE: "/home/nonroot/ultralytics-malcontent-diff-v8.3.40-v8.3.41.json"
  LOCAL_OUTPUT_DIR: "${{ github.workspace }}/scans"
  LOCAL_OUTPUT_FILE: "${{ github.workspace }}/scans/ultralytics-malcontent-diff-v8.3.40-v8.3.41.json"

jobs:
  scan-python-malware:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      security-events: write
      contents: write
      packages: write
      id-token: write
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - name: Clone malcontent-samples repo
        run: |
          if [ -d "$MALCONTENT_SAMPLES_DIR" ]; then
            echo "[*] Using existing local repo at $MALCONTENT_SAMPLES_DIR"
          else
            echo "[*] Cloning repository (shallow)..."
            git clone --depth=1 --branch main --single-branch "$MALCONTENT_SAMPLES_REPO_URL" "$MALCONTENT_SAMPLES_DIR"
          fi

      - name: Pull Malcontent Image
        run: |
          docker pull "$MALCONTENT_IMAGE"

      - name: Analyze Ultralytics v8.3.40
        run: |
          docker run --rm -v "$MALCONTENT_ULTRALYTICS_SAMPLES_DIR:/home/nonroot/malcontent/" \
            "$MALCONTENT_IMAGE" \
            --min-risk=medium \
            --stats \
            analyze /home/nonroot/malcontent/v8.3.40

      - name: Analyze Ultralytics v8.3.41
        run: |
          docker run --rm -v "$MALCONTENT_ULTRALYTICS_SAMPLES_DIR:/home/nonroot/malcontent/" \
            "$MALCONTENT_IMAGE" \
            --include-data-files=true \
            --min-risk=medium \
            --quantity-increases-risk=true \
            --stats \
            analyze /home/nonroot/malcontent/v8.3.41

      - name: Diffing Ultralytics v8.3.40 ‚Üî v8.3.41
        run: |
          CONTAINER_NAME="malcontent-diff-temp"

          if [ -d "$LOCAL_OUTPUT_DIR" ]; then
            echo "scans directory exists"
          else
            echo "creating scans dir"
            mkdir -p "$LOCAL_OUTPUT_DIR"
          fi

          docker run --name "$CONTAINER_NAME" \
            -v "$MALCONTENT_ULTRALYTICS_SAMPLES_DIR:/home/nonroot/malcontent/" \
            "$MALCONTENT_IMAGE" \
            --min-risk=high \
            --format=json \
            --output="$CONTAINER_OUTPUT_FILE" \
            diff --file-risk-increase=true \
            /home/nonroot/malcontent/v8.3.40 /home/nonroot/malcontent/v8.3.41

          docker cp "$CONTAINER_NAME:$CONTAINER_OUTPUT_FILE" "$LOCAL_OUTPUT_FILE"
          docker rm "$CONTAINER_NAME" > /dev/null

          echo "[*] Output saved to scans/ultralytics-malcontent-diff-v8.3.40-v8.3.41.json"
          echo "[‚úî] Done"

      - name: Commit and push updated JSON file
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          git add "${{ env.LOCAL_OUTPUT_FILE }}"

          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update malware diff JSON: v8.3.40 ‚Üí v8.3.41"
            git push origin "${{ github.ref_name }}"
          fi

      - name: Detect CRITICAL or HIGH malcontent findings
        id: detect
        run: |
          JSON="$LOCAL_OUTPUT_FILE"
          has_critical=false
          has_high=false
      
          if jq -e '.Diff.Modified[].RiskLevel == "CRITICAL"' "$JSON" > /dev/null; then
            has_critical=true
          fi
          if jq -e '.Diff.Modified[].RiskLevel == "HIGH"' "$JSON" > /dev/null; then
            has_high=true
          fi
          
          if jq -e '.Diff.Modified[].Behaviors[]?.RiskLevel == "CRITICAL"' "$JSON" > /dev/null; then
            has_critical=true
          fi
          if jq -e '.Diff.Modified[].Behaviors[]?.RiskLevel == "HIGH"' "$JSON" > /dev/null; then
            has_high=true
          fi
      
          echo "critical=$has_critical" >> "$GITHUB_OUTPUT"
          echo "high=$has_high" >> "$GITHUB_OUTPUT"
      
          if $has_critical; then
            echo "üî¥ CRITICAL finding detected"
          fi
          if $has_high; then
            echo "üü† HIGH finding detected"
          fi
          if ! $has_critical && ! $has_high; then
            echo "‚úÖ No CRITICAL or HIGH findings"
          fi
          
      - name: Post summary comment to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
          
            const fs = require('fs');
            const path = process.env.LOCAL_OUTPUT_FILE;
            const raw = fs.readFileSync(path, 'utf8');
            const json = JSON.parse(raw);      
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            const formatBehavior = (b) => `- **[${b.RiskLevel}]** [${b.RuleName}](${b.RuleURL}): ${b.Description}`;
      
            let commentLines = [`### üõ°Ô∏è Malcontent Findings: v8.3.40 ‚Üí v8.3.41`];
      
            for (const [file, entry] of Object.entries(json.Diff?.Modified || {})) {
              const findings = [];
      
              if (entry.RiskLevel === 'CRITICAL' || entry.RiskLevel === 'HIGH') {
                findings.push(`- **[${entry.RiskLevel}]** file-level risk`);
              }
      
              for (const b of entry.Behaviors || []) {
                if (b.RiskLevel === 'CRITICAL' || b.RiskLevel === 'HIGH') {
                  findings.push(formatBehavior(b));
                }
              }
      
              if (findings.length) {
                commentLines.push(`\n<details><summary><code>${file}</code></summary>\n\n${findings.join('\n')}\n\n</details>`);
              }
            }
      
            if (commentLines.length > 1) {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body: commentLines.join('\n')
              });
            } else {
              core.notice('No critical or high findings to post');
            }
      
      - name: Add malcontent/critical label to PR
        if: steps.detect.outputs.critical == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const label = 'malcontent/critical';
            const {owner, repo} = context.repo;
            const issue_number = context.payload.pull_request.number;

            try {
              await github.rest.issues.getLabel({owner, repo, name: label});
            } catch (e) {
              if (e.status === 404) {
                await github.rest.issues.createLabel({
                  owner, repo,
                  name: label,
                  color: 'b60205',
                  description: 'Critical malware risk detected by malcontent'
                });
              } else {
                throw e;
              }
            }

            await github.rest.issues.addLabels({
              owner, repo, issue_number,
              labels: [label]
            });
            core.notice(`Added "${label}" label to PR #${issue_number}`);
