name: build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  CGR_PYTHON_BUILDER_IMAGE_NAME: "cgr.dev/cgr-demo.com/python:3.13-dev"
  CGR_PYTHON_RUNTIME_IMAGE_NAME: "cgr.dev/cgr-demo.com/python:3.13"
  LIBRARY_TYPE: "VENDORED"
  LIBRARY_SOURCE: "CHAINGUARD_LIBRARIES" #MALCONTENT_SAMPLES_PYPI or CHAINGUARD_LIBRARIES
  
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      pull-requests: write # Required for PR comments
      issues: write # Required for issue comments

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          ref: ${{ github.ref }}
          fetch-depth: 2 # Need HEAD and HEAD~1

      - uses: octo-sts/action@6177b4481c00308b3839969c3eca88c96a91775f # v1.0.0
        id: octo-sts
        with:
          scope: chainguard-dev/libraries-ultralytics-attack-demo
          identity: build
          
      - name: Install Cosign
        uses: sigstore/cosign-installer@398d4b0eeef1380460a10c8013a76f728fb906ac # v3.9.1
      
      - uses: chainguard-dev/setup-chainctl@272698817627c158bbd813cb783b62a4b9bbbc67 # v0.3.1
        with:
          identity: "4cf15780a13a9b6576d8b357e6524554c8c12a18/aab27dc39ad870c9"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 #v3.11.1
        
      - name: 'Auth to Registry'
        run: |
          chainctl auth configure-docker
          chainctl auth status

      - name: 'Verify Chainguard Python Image Signatures && pre-pull images'
        run: |
          # Images will be signed by either the CATALOG_SYNCER or APKO_BUILDER identity in your organization.
          # To find these values for your organization, you can view the "Assumed Identities" page in your organization settings.
          CATALOG_SYNCER="4cf15780a13a9b6576d8b357e6524554c8c12a18/c03040118377d88c"
          APKO_BUILDER="4cf15780a13a9b6576d8b357e6524554c8c12a18/ca93125e202f81f8"
          
          cosign verify \
              --certificate-oidc-issuer=https://issuer.enforce.dev \
              --certificate-identity-regexp="https://issuer.enforce.dev/(${CATALOG_SYNCER}|${APKO_BUILDER})" \
              ${{ env.CGR_PYTHON_BUILDER_IMAGE_NAME }} | jq        
          cosign verify \
              --certificate-oidc-issuer=https://issuer.enforce.dev \
              --certificate-identity-regexp="https://issuer.enforce.dev/(${CATALOG_SYNCER}|${APKO_BUILDER})" \
              ${{ env.CGR_PYTHON_RUNTIME_IMAGE_NAME }} | jq 
          
          docker pull ${{ env.CGR_PYTHON_BUILDER_IMAGE_NAME }}
          docker pull ${{ env.CGR_PYTHON_RUNTIME_IMAGE_NAME }}      
         
      - name: Vendor ultralytics malware example from malcontent-samples
        if: env.LIBRARY_TYPE == 'VENDORED' && env.LIBRARY_SOURCE == 'MALCONTENT_SAMPLES_PYPI'
        run: |
          echo "Using vendored ultralytics from malcontent-samples-ultralytics/v8.3.40/"
          rm -rf src/ultralytics || true
          mkdir -p src/ultralytics
          cp -pr malcontent-samples-ultralytics/v8.3.40/* src/ultralytics/
          git config --global user.email "gha@users.noreply.github.com"
          git config --global user.name "github-actions"
          git add src/ultralytics/
          git commit -m "Inject ultralytics vendor dependency malware example"     

          echo "GITHUB_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "GITHUB_REF=$(git symbolic-ref HEAD)" >> $GITHUB_ENV
      
      # - name: Install and run libcheck
      #   if: env.LIBRARY_TYPE == 'VENDORED' && env.LIBRARY_SOURCE == 'CHAINGUARD_LIBRARIES'
      #   env:
      #     GH_TOKEN: ${{ steps.octo-sts-libcheck.outputs.token }}
      #   run: |
      #     echo "Installing libcheck from GitHub release"
      #     mkdir -p libcheck-bin
      #     gh release download v0.2.8 \
      #       --repo chainguard-dev/ecosystems-libcheck \
      #       --pattern "libcheck_0.2.8_Linux_x86_64.tar.gz" \
      #       --dir libcheck-bin
      
      #     tar -xzf libcheck.tar.gz -C libcheck-bin
      #     chmod +x libcheck-bin/libcheck

      #     echo "libcheck installed to libcheck-bin/"
      #     ./libcheck-bin/libcheck --version || echo "Libcheck installed but version check failed"
      #     echo "Runnling libcheck https://github.com/chainguard-dev/ecosystems-libcheck"
      #     ./libcheck -o csv --detailed tmp_wheels/ultralytics-8.3.40-py3-none-any.whl > compliance-report.csv      
      
      - name: Pull and vendor Chainguard Ultralytics Library
        if: env.LIBRARY_TYPE == 'VENDORED' && env.LIBRARY_SOURCE == 'CHAINGUARD_LIBRARIES'
        run: |
          echo "Pulling Chainguard Ultralytics Library locally"
          export CGR_PULL_TOKEN_NAME="ultralytics-attack-demo-pull-token-$(date +%s)"
          
          eval $(chainctl auth pull-token --library-ecosystem=python --parent=cgr-demo.com --ttl=1m --output=env --name="$CGR_PULL_TOKEN_NAME")
      
          mkdir -p tmp_wheels
          curl -L --user "$CHAINGUARD_PYTHON_IDENTITY_ID:$CHAINGUARD_PYTHON_TOKEN" \
            -o tmp_wheels/ultralytics-8.3.40-py3-none-any.whl \
            https://libraries.cgr.dev/python/files/15f7d141c3b76b85/cf2fb95d7a92c8aa/ultralytics/ultralytics-8.3.40-py3-none-any.whl
            
          echo "Unpacking wheel into src/ultralytics/"
          rm -rf src/ultralytics || true
          mkdir -p src/ultralytics
          unzip tmp_wheels/ultralytics-8.3.40-py3-none-any.whl -d src/ultralytics/
          rm -rf tmp_wheels
          
          git config --global user.email "gha@users.noreply.github.com"
          git config --global user.name "github-actions"
          git add src/ultralytics/
          git commit -m "Add Chainguard ultralytics library as a vendor dependency"

          echo "GITHUB_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "GITHUB_REF=$(git symbolic-ref HEAD)" >> $GITHUB_ENV
          
      - name: Build Docker image using local base image
        run: |
          docker build \
            --build-arg BASE_IMAGE=${{ env.CGR_PYTHON_BUILDER_IMAGE_NAME }} \
            -t ultralytics:cgr-base \
            -f Dockerfile .
        working-directory: src
        
      - uses: chainguard-dev/malcontent-action@228e2bc9f055a1cd367d59e380c947e76a6e25d4 #June 24 2025 HEAD commit
        id: malcontent
        with:
          github-token: ${{ steps.octo-sts.outputs.token }}
          fail-on-increase: true
      
      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@ce28f5bb42b7a9f2c824e633a3f6ee835bab6858 #v3.29.0 - 11 Jun 2025
        if: always() # Upload even if the malcontent check fails
        env:
          GITHUB_TOKEN: ${{ steps.octo-sts.outputs.token }}
        with:
          sarif_file: ${{ steps.malcontent.outputs.sarif-file }}
          category: malcontent
          sha: ${{ github.sha }}
          ref: ${{ github.ref }}
