name: build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  CGR_PYTHON_BUILDER_IMAGE_NAME: "cgr.dev/cgr-demo.com/python:3.13-dev"
  CGR_PYTHON_RUNTIME_IMAGE_NAME: "cgr.dev/cgr-demo.com/python:3.13"
  # MALCONTENT_IMAGE: "cgr.dev/chainguard/malcontent@sha256:fdfca44c401a5ca98af51292a821278644895bc1963f7a76a733d76647ff0ede"
  # MALCONTENT_SAMPLES_REPO_URL: "https://github.com/chainguard-dev/malcontent-samples.git"
  # MALCONTENT_SAMPLES_DIR: "${{ github.workspace }}/malcontent-samples"
  # MALCONTENT_ULTRALYTICS_SAMPLES_DIR: "${{ github.workspace }}/malcontent-samples/python/2024.ultralytics"
  # CONTAINER_OUTPUT_FILE: "/home/nonroot/ultralytics-malcontent-diff-v8.3.40-v8.3.41.json"
  # LOCAL_OUTPUT_DIR: "${{ github.workspace }}/scans"
  # LOCAL_OUTPUT_FILE: "${{ github.workspace }}/scans/ultralytics-malcontent-diff-v8.3.40-v8.3.41.json"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0

      - uses: octo-sts/action@6177b4481c00308b3839969c3eca88c96a91775f # v1.0.0
        id: octo-sts
        with:
          scope: chainguard-dev/libraries-ultralytics-attack-demo
          identity: build

      - name: Install Cosign
        uses: sigstore/cosign-installer@398d4b0eeef1380460a10c8013a76f728fb906ac # v3.9.1
      
      - uses: chainguard-dev/setup-chainctl@272698817627c158bbd813cb783b62a4b9bbbc67 # v0.3.1
        with:
          identity: "4cf15780a13a9b6576d8b357e6524554c8c12a18/aab27dc39ad870c9"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 #v3.11.1
        
      - name: 'Auth to Registry'
        run: |
          chainctl auth configure-docker

      - name: 'Verify Chainguard Python Image Signatures && pre-pull images'
        run: |
          # Images will be signed by either the CATALOG_SYNCER or APKO_BUILDER identity in your organization.
          # To find these values for your organization, you can view the "Assumed Identities" page in your organization settings.
          CATALOG_SYNCER="4cf15780a13a9b6576d8b357e6524554c8c12a18/c03040118377d88c"
          APKO_BUILDER="4cf15780a13a9b6576d8b357e6524554c8c12a18/ca93125e202f81f8"
          
          cosign verify \
              --certificate-oidc-issuer=https://issuer.enforce.dev \
              --certificate-identity-regexp="https://issuer.enforce.dev/(${CATALOG_SYNCER}|${APKO_BUILDER})" \
              ${{ env.CGR_PYTHON_BUILDER_IMAGE_NAME }} | jq        
          cosign verify \
              --certificate-oidc-issuer=https://issuer.enforce.dev \
              --certificate-identity-regexp="https://issuer.enforce.dev/(${CATALOG_SYNCER}|${APKO_BUILDER})" \
              ${{ env.CGR_PYTHON_RUNTIME_IMAGE_NAME }} | jq 
          
          docker pull ${{ env.CGR_PYTHON_BUILDER_IMAGE_NAME }}
          docker pull ${{ env.CGR_PYTHON_RUNTIME_IMAGE_NAME }}      

      - name: Build Docker image using local base image
        run: |
          docker build \
            --build-arg BASE_IMAGE=${{ env.CGR_PYTHON_BUILDER_IMAGE_NAME }} \
            -t ultralytics:cgr-base \
            -f Dockerfile .
          
      # - name: Run malware test action
      #   uses: chainguard-dev/malcontent-bot@main  # Pin this to a commit SHA if needed
      #   with:
      #     malcontent-image: "cgr.dev/chainguard/malcontent@sha256:fdfca44c401a5ca98af51292a821278644895bc1963f7a76a733d76647ff0ede"
      #     before-dir: ${{ github.workspace }}/malcontent-samples/python/2024.ultralytics/v8.3.40
      #     after-dir: ${{ github.workspace }}/malcontent-samples/python/2024.ultralytics/v8.3.41
